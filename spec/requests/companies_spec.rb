 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/companies", type: :request do
  # Company. As you add validations to Company, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: 'Sony' }
  }

  let(:invalid_attributes) {
    { name: nil }
  }

  describe "GET /index" do
    before do
     Company.create!([ { name: "Bosch" }, { name: "Tata" } ])
   end

    it "renders a successful response" do
      get companies_url
      expect(response).to be_successful
    end

    it "returns companies matching search query" do
      get "/companies", params: { search: 'tata' },
                                    headers: { "CONTENT_TYPE" => "application/json",
                                               "ACCEPT" => "application/json" }
      expect(response).to be_successful

      json_response = JSON.parse(response.body)
      puts json_response
      expect(json_response.size).to eq(1)
      expect(json_response.first["name"]).to eq("Tata")
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      company = Company.create! valid_attributes
      get company_url(company)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_company_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      company = Company.create! valid_attributes
      get edit_company_url(company)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Company" do
        expect {
          post companies_url, params: { company: valid_attributes }
        }.to change(Company, :count).by(1)
      end

      it "redirects to the created company" do
        post companies_url, params: { company: valid_attributes }
        expect(response).to redirect_to companies_url
      end
    end

    context "with invalid parameters" do
      it "does not create a new Company" do
        expect {
          post companies_url, params: { company: invalid_attributes }
        }.to change(Company, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post companies_url, params: { company: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end

  describe "POST /create_companies" do
    context "with valid parameters" do
      let(:valid_params) do
        {
          companies: [
            { name: "Company A" },
            { name: "Company B" }
          ]
        }
      end

      it "creates new companies" do
        expect {
          post "/create_companies", params: valid_params.to_json,
                                    headers: { "CONTENT_TYPE" => "application/json",
                                               "ACCEPT" => "application/json" },
                                    env: { 'HTTP_AUTHORIZATION' => ActionController::HttpAuthentication::Basic.encode_credentials("dhh", "secret") }
        }.to change(Company, :count).by(2)

        expect(response).to have_http_status(:created)
        expect(response.content_type).to include("application/json")

        json_response = JSON.parse(response.body)
        expect(json_response.size).to eq(2)
        expect(json_response.first["name"]).to eq("Company A")
        expect(json_response.second["name"]).to eq("Company B")
      end
    end

    context "with invalid parameters" do
      let(:invalid_params) do
        {
          companies: [
            { name: "Company A" },
            { name: nil }
          ]
        }
      end

      it "returns unprocessable_entity status" do
        post "/create_companies", params: invalid_params.to_json,
                                  headers: { "CONTENT_TYPE" => "application/json",
                                             "ACCEPT" => "application/json" },
                                  env: { 'HTTP_AUTHORIZATION' => ActionController::HttpAuthentication::Basic.encode_credentials("dhh", "secret") }

        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to include("application/json")

        json_response = JSON.parse(response.body)
        expect(json_response).to include("error")
        expect(json_response["error"]).to be_a(Array)
        expect(json_response["error"]).to include("Name can't be blank")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { name: 'LG' }
      }

      it "updates the requested company" do
        company = Company.create! valid_attributes
        patch company_url(company), params: { company: new_attributes }
        company.reload
        expect(company.name).to eq 'LG'
      end

      it "redirects to the company" do
        company = Company.create! valid_attributes
        patch company_url(company), params: { company: new_attributes }
        company.reload
        expect(response).to redirect_to companies_url
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        company = Company.create! valid_attributes
        patch company_url(company), params: { company: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested company" do
      company = Company.create! valid_attributes
      expect {
        delete company_url(company)
      }.to change(Company, :count).by(-1)
    end

    it "redirects to the companies list" do
      company = Company.create! valid_attributes
      delete company_url(company)
      expect(response).to redirect_to(companies_url)
    end
  end
end
